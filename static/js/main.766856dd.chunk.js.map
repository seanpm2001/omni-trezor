{"version":3,"sources":["components/breadcrumbNav.js","components/connectTrezor.js","components/selectAddress.js","components/specifyDetails.js","components/confirmTransaction.js","components/complete.js","App.js","serviceWorker.js","index.js"],"names":["BreadcrumbNav","handleNavClick","e","target","classList","contains","_this","props","setStep","getAttribute","react_default","a","createElement","className","aria-label","data-step","concat","this","currentStep","onClick","React","Component","ConnectTrezor","discoverAccounts","_callee","accountResults","regenerator_default","wrap","_context","prev","next","setLoading","TrezorConnect","getAccountInfo","coin","details","sent","parentCallback","stop","index_es","icon","faExclamationTriangle","href","rel","id","SelectAddress","selectAddress","address","addresses","parseInt","_this2","length","map","index","data-address","key","data-address-index","omniDetails","balance","propertyinfo","url","name","propertyid","divisible","value","SpecifyDetails","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","setState","assetIndex","amount","recipient","handleSubmit","preventDefault","state","readOnly","onChange","filter","c","type","ConfirmTransaction","toggleOpreturnDetails","opreturnVisible","signSend","setLoadingAlt","transactionElements","asset","sendAddress","faChevronUp","faChevronDown","transactionIO","opreturnDataSegments","_hexToString","estimatedFee","loadingAlt","disabled","faCog","spin","hex","string","i","String","fromCharCode","substr","Complete","faCheckCircle","transactionResults","payload","txid","getHDPath","path","parts","toLowerCase","split","p","hardened","n","isNaN","toHardened","App","loadingStatus","loading","step","handleDiscoverAccounts","_ref","asyncToGenerator","mark","transactions","eligibleTxs","sortedTxs","addressPaths","eligibleAddrs","transactionApiResults","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","txResultRaw","txResultJson","omniDetailsRaw","addressDetails","console","log","success","accountInfo","utxo","tx","sort","v","indexOf","find","addressPath","outTxHash","outTxIndex","vout","outTxValue","undefined","Symbol","iterator","done","fetch","json","t0","return","finish","scriptpubkey_address","method","headers","Content-Type","body","join","accountAddresses","_x","apply","arguments","handleSelectAddress","_ref2","_callee2","_context2","_x2","handleSpecifyDetails","_ref3","_callee4","data","formData","_context4","_callee3","_context3","_generateTransaction","_x3","handleConfirmTransaction","_callee5","_context5","_signSendTransaction","alert","_callee6","omniAssetId","omniAmount","omniSegments","omniSimpleSendData","calculatedFee","changeAmount","gettingChange","inputs","outputs","_context6","toString","padStart","parseFloat","address_n","prev_index","prev_hash","script_type","op_return_data","push","abrupt","opreturnData","_callee7","_context7","signTransaction","transactionSteps","0","1","2","3","4","manifest","email","appUrl","breadcrumbNav","connectTrezor","specifyDetails","confirmTransaction","complete","Date","now","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.766856dd.chunk.js","sourcesContent":["import React from 'react';\n\nclass BreadcrumbNav extends React.Component {\n  render() {\n    return(\n      <nav className=\"transaction-breadcrumbs\" aria-label=\"breadcrumbs\">\n        <ul>\n          <li data-step={0} className={`${this.props.currentStep >= 0 ? 'active' : ''} ${this.props.currentStep === 0 ? 'current' : ''}`} onClick={this.handleNavClick}>Connect Trezor</li>\n          <span className={`${this.props.currentStep >= 1 ? 'active' : ''}`}>→</span>\n          <li data-step={1} className={`${this.props.currentStep >= 1 ? 'active' : ''} ${this.props.currentStep === 1 ? 'current' : ''}`} onClick={this.handleNavClick}>Select Address</li>\n          <span className={`${this.props.currentStep >= 2 ? 'active' : ''}`}>→</span>\n          <li data-step={2} className={`${this.props.currentStep >= 2 ? 'active' : ''} ${this.props.currentStep === 2 ? 'current' : ''}`} onClick={this.handleNavClick}>Specify Details</li>\n          <span className={`${this.props.currentStep >= 3 ? 'active' : ''}`}>→</span>\n          <li data-step={3} className={`${this.props.currentStep >= 3 ? 'active' : ''} ${this.props.currentStep === 3 ? 'current' : ''}`} onClick={this.handleNavClick}>Sign & Send</li>\n          <span className={`${this.props.currentStep >= 4 ? 'active' : ''}`}>→</span>\n          <li data-step={4} className={`${this.props.currentStep >= 4 ? 'active' : ''} ${this.props.currentStep === 4 ? 'current' : ''}`} onClick={this.handleNavClick}>Complete</li>\n        </ul>\n      </nav>\n    );\n  }\n\n  handleNavClick = (e) => {\n    if (e.target.classList.contains('active') && !e.target.classList.contains('current')) {\n      this.props.setStep(e.target.getAttribute('data-step'));\n    }\n  }\n}\n\nexport default BreadcrumbNav\n","import React from 'react';\nimport TrezorConnect from 'trezor-connect';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\n\nclass ConnectTrezor extends React.Component {\n  render() {\n    return(\n      <article className=\"connect-trezor\">\n        <h3><FontAwesomeIcon icon={faExclamationTriangle} className=\"is-hidden\"/> Please Read Before Continuing <FontAwesomeIcon icon={faExclamationTriangle} className=\"is-hidden\"/></h3>\n\n        <div className=\"preflight-checklist-container\">\n          <div className=\"checklist\">\n            <p>Have you...</p>\n            <ul>\n              <li>Checked that the URL bar says https://trezor.github.io/omni-trezor ?</li>\n              <li>Verified your recipient address?</li>\n              <li>Confirmed you have at least one output in your sending address greater than or equal to 0.00008 BTC?</li>\n              <li>Audited this tool's <a href=\"https://github.com/trezor/omni-trezor\" target=\"_blank\" rel=\"noopener noreferrer\">source code on GitHub?</a></li>\n              <li>Read the <a href=\"https://github.com/trezor/omni-trezor/blob/master/TERMS.md\" target=\"_blank\" rel=\"noopener noreferrer\">Terms of Use?</a></li>\n            </ul>\n          </div>\n        </div>\n\n        <p>If so, this tool allows you to send OMNI transactions using your Trezor's Bitcoin addresses.  Click the button below to continue.</p>\n\n        <button id=\"discoverAccounts\" onClick={this.discoverAccounts} className=\"button\">Connect to Trezor</button>\n        <small>By continuing you agree to the <a href=\"https://github.com/trezor/omni-trezor/blob/master/TERMS.md\" target=\"_blank\" rel=\"noopener noreferrer\">Terms of Use.</a></small>\n      </article>\n    )\n  }\n\n  discoverAccounts = async () => {\n    this.props.setLoading(true);\n    let accountResults = await TrezorConnect.getAccountInfo({\n      coin: 'btc',\n      details: 'tokens'\n    });\n    this.props.setLoading(false);\n    this.props.parentCallback(accountResults);\n  }\n}\n\nexport default ConnectTrezor;\n","import React from 'react';\n\nclass SelectAddress extends React.Component {\n  render() {\n    return(\n      <div className=\"addressDetailContainer\">\n        {this.props.addresses.length === 0 &&\n          <p>There are no eligible addresses on this account.  Please ensure your addresses containing OMNI tokens have at least 8000 satoshi in Bitcoin on a single output as well in order to faciliate a transaction.</p>\n        }\n        {this.props.addresses.map((address, index) => {\n          return(\n            <article className=\"addressDetails\" data-address={address.address} key={index}>\n              <header>\n                <h4>{address.address}</h4>\n                <button onClick={this.selectAddress} data-address-index={index} className=\"button\">\n                  Select Address\n                </button>\n              </header>\n\n              <table>\n                <tbody>\n                  {address.omniDetails.balance.map((coin, index) => {\n                    return(\n                      <tr key={index}>\n                        <td className=\"coin-name\">\n                          <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href={coin.propertyinfo.url}>\n                            {coin.propertyinfo.name}\n                          </a>\n                          <small>ID: {coin.propertyinfo.propertyid}</small>\n                        </td>\n                        <td>{coin.divisible ? parseInt(coin.value)*0.00000001 : parseInt(coin.value)}</td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </article>\n          );\n        })}\n      </div>\n    )\n  }\n\n  selectAddress = (e) => {\n    let address = this.props.addresses[parseInt(e.target.getAttribute('data-address-index'))];\n    this.props.parentCallback(address);\n  }\n}\n\nexport default SelectAddress;\n","import React from 'react';\n\nclass SpecifyDetails extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      assetIndex: 0,\n      amount: '',\n      recipient: ''\n    }\n  }\n\n  render() {\n    return(\n      <section className=\"transaction-details-form-container\">\n        <header>\n          <h2>Specify Transaction Details</h2>\n        </header>\n\n        <form>\n          <div className=\"form-group\">\n            <label>Transaction Type</label>\n            <div className=\"select is-fullwidth\">\n              <select value=\"simplesend\" readOnly={true}>\n                <option value=\"simplesend\">Simple Send</option>\n              </select>\n            </div>\n          </div>\n\n          <div className=\"txAssetAmountContaier\">\n\n            <div className=\"form-group\">\n              <label>Asset</label>\n              <div className=\"select\">\n                <select value={this.state.assetIndex} onChange={this.handleChange} name='asset'>\n                  {this.props.address.omniDetails.balance.filter(c => c.id !== '0').map((c, index) => {\n                    return(\n                      <option value={index} key={c.id}>{c.propertyinfo.name} (ID: {c.id})</option>\n                    );\n                  })}\n                </select>\n              </div>\n            </div>\n\n            <div className=\"form-group\">\n              <label>Amount</label>\n              <input type=\"number\" value={this.state.amount} onChange={this.handleChange} name='amount' className=\"input\"/>\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <label>Receiving Address</label>\n            <input type=\"text\" value={this.state.recipient} onChange={this.handleChange} name='recipient' className=\"input\" />\n          </div>\n\n          <div className=\"form-group\">\n            <button className=\"button is-fullwidth\" onClick={this.handleSubmit}>Submit</button>\n          </div>\n        </form>\n      </section>\n    );\n  }\n\n  handleChange = (e) => {\n    switch (e.target.getAttribute('name')) {\n      case 'asset':\n        this.setState({assetIndex: e.target.value});\n        break;\n      case 'amount':\n        this.setState({amount: e.target.value});\n        break;\n      case 'recipient':\n        this.setState({recipient: e.target.value});\n        break;\n      default:\n        break;\n    }\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.parentCallback(this.state)\n  }\n}\n\nexport default SpecifyDetails;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCog, faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons';\n\nclass ConfirmTransaction extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      opreturnVisible: false\n    }\n  }\n\n  render() {\n    return(\n      <article className=\"confirm-transaction-container\">\n        <header>\n          <h2>Confirm Transaction</h2>\n        </header>\n\n        <section className=\"sending-from\">\n          <p><b>Simple Send</b> Operation of <b>{this.props.transactionElements.amount} {this.props.transactionElements.asset.propertyinfo.name}</b> From</p>\n          <address>{this.props.sendAddress.address}</address>\n        </section>\n\n        <p className=\"opreturn-details-toggle\" onClick={this.toggleOpreturnDetails}>\n          {this.state.opreturnVisible ?\n            <FontAwesomeIcon icon={faChevronUp} />\n          :\n            <FontAwesomeIcon icon={faChevronDown} />\n          }\n          {this.state.opreturnVisible ?\n            \" Hide OP_RETURN Details\"\n          :\n            \" Show OP_RETURN Details\"\n          }\n        </p>\n        <section className={`opreturn-details ${this.state.opreturnVisible ? \"\" : \"is-hidden\"}`}>\n          <small>OP_RETURN data for the OMNI transaction.  This may be shown on your Trezor depending on firmware version.</small>\n          <table>\n            <tbody>\n              <tr>\n                <td className=\"omni-prefix omni-segment\">{this.props.transactionIO.opreturnDataSegments[0]}</td>\n                <td className=\"omni-version omni-segment\">{this.props.transactionIO.opreturnDataSegments[1]}</td>\n                <td className=\"omni-asset-id omni-segment\">{this.props.transactionIO.opreturnDataSegments[2]}</td>\n                <td className=\"omni-amount omni-segment\">{this.props.transactionIO.opreturnDataSegments[3]}</td>\n              </tr>\n              <tr>\n                <td><small>Prefix</small></td>\n                <td><small>Version</small></td>\n                <td><small>Asset ID</small></td>\n                <td><small>Amount</small></td>\n              </tr>\n              <tr>\n                <td><code>{this._hexToString(this.props.transactionIO.opreturnDataSegments[0])}</code></td>\n                <td><code>{parseInt(this.props.transactionIO.opreturnDataSegments[1], 16)}</code></td>\n                <td><code>{parseInt(this.props.transactionIO.opreturnDataSegments[2], 16)}</code></td>\n                <td>\n                  <code>{this.props.transactionElements.asset.divisible ? parseInt(this.props.transactionIO.opreturnDataSegments[3], 16) * 0.00000001 : parseInt(this.props.transactionIO.opreturnDataSegments[3], 16)}</code>\n                  {this.props.transactionElements.asset.divisible ?\n                    <small>(Divisible)</small>\n                  :\n                    <small>(Not Divisible)</small>\n                  }\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </section>\n\n        <section className=\"recipient\">\n          <small>Recipient Address</small>\n          <address>{this.props.transactionElements.recipient}</address>\n        </section>\n\n        <section className=\"estimated-fee\">\n          <small>Estimated Fee: {this.props.transactionIO.estimatedFee * 0.00000001} BTC</small>\n          <small>Note: Also sending 0.000006 BTC to recipient to faciliate OMNI transaction.</small>\n        </section>\n\n        <button className={`button is-fullwidth ${this.props.loadingAlt ? 'disabled' : ''}`} onClick={this.signSend} disabled={this.props.loadingAlt}>\n          {this.props.loadingAlt ?\n            <FontAwesomeIcon icon={faCog} spin/>\n          :\n            \"Sign & Send\"\n          }\n        </button>\n      </article>\n    );\n  }\n\n  toggleOpreturnDetails = () => {\n    this.setState((state, props) => {\n      return {\n        opreturnVisible: !state.opreturnVisible\n      }\n    });\n  }\n\n  signSend = () => {\n    this.props.setLoadingAlt(true);\n    this.props.parentCallback();\n  }\n\n  _hexToString(hex) {\n    var string = '';\n    for (var i = 0; i < hex.length; i += 2) {\n      string += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n    }\n    return string;\n  }\n}\n\nexport default ConfirmTransaction;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckCircle } from '@fortawesome/free-solid-svg-icons';\n\nclass Complete extends React.Component {\n  render() {\n    return(\n      <section className=\"complete-container\">\n        <h2>Transaction Complete <FontAwesomeIcon icon={faCheckCircle} /></h2>\n\n        <div className=\"transaction-hash\">\n          <p>Transaction Hash</p>\n          <address>{this.props.transactionResults.payload.txid}</address>\n        </div>\n\n        <div className=\"view-on-explorers\">\n          <a href={`https://omniexplorer.info/tx/${this.props.transactionResults.payload.txid}`} target=\"_blank\" rel=\"noopener noreferrer nofollow\" className=\"button\">View on Omni Explorer</a>\n          <a href={`https://btc1.trezor.io/tx/${this.props.transactionResults.payload.txid}`} target=\"_blank\" rel=\"noopener noreferrer nofollow\" className=\"button\">View on Trezor Blockbook</a>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Complete;\n","import React from 'react';\nimport TrezorConnect from 'trezor-connect';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCog } from '@fortawesome/free-solid-svg-icons';\n\nimport './App.scss';\nimport BreadcrumbNav from './components/breadcrumbNav';\nimport ConnectTrezor from './components/connectTrezor';\nimport SelectAddress from './components/selectAddress';\nimport SpecifyDetails from './components/specifyDetails';\nimport ConfirmTransaction from './components/confirmTransaction';\nimport Complete from './components/complete';\n\n// from connect/src/js/utils/pathUtils.js\nconst HD_HARDENED = 0x80000000;\nconst toHardened = (n) => (n | HD_HARDENED) >>> 0;\nconst getHDPath = (path) => {\n  const parts = path.toLowerCase().split('/');\n  if (parts[0] !== 'm') throw 'Not a valid path';\n  return parts.filter((p) => p !== 'm' && p !== '')\n      .map((p) => {\n          let hardened = false;\n          if (p.substr(p.length - 1) === \"'\") {\n              hardened = true;\n              p = p.substr(0, p.length - 1);\n          }\n          let n = parseInt(p);\n          if (isNaN(n)) {\n              throw 'Not a valid path';\n          } else if (n < 0) {\n              throw 'Path cannot contain negative values';\n          }\n          if (hardened) { // hardened index\n              n = toHardened(n);\n          }\n          return n;\n      });\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // this.handleDiscoverAccounts = this.handleDiscoverAccounts.bind(this);\n    // this.setLoading = this.setLoading.bind(this);\n\n    this.state = {\n      loading: true,\n      loadingAlt: false,\n      currentStep: 0,\n      accountInfo: {},\n      accountAddresses: [],\n      sendAddress: {},\n      transactionElements: {},\n      transactionIO: {},\n      transactionResults: {}\n    };\n  }\n\n  componentWillMount() {\n    this.transactionSteps = {\n      0: 'connectTrezor',\n      1: 'selectAddress',\n      2: 'specifyDetails',\n      3: 'confirmTransaction',\n      4: 'complete'\n    };\n  }\n\n  componentDidMount() {\n    this.setState({loading: false});\n  }\n\n  render() {\n    TrezorConnect.manifest({\n        email: 'info@satoshilabs.com',\n        appUrl: 'https://trezor.github.io/omni-trezor'\n    });\n\n    return (\n      <main className=\"app\">\n        <header className=\"app-header\">\n          <h1 className=\"title\">OMNI Wallet for Trezor</h1>\n        </header>\n\n        <article className=\"app-body\">\n          <BreadcrumbNav\n            setStep={this.setStep}\n            transactionSteps={this.transactionSteps}\n            currentStep={this.state.currentStep}\n          />\n\n          <section className=\"transaction-container\">\n            {\n              this.state.loading ? (\n                <FontAwesomeIcon icon={faCog} spin className=\"loading-spinner\"/>\n              ) : (\n                {\n                  connectTrezor: <ConnectTrezor\n                    parentCallback={this.handleDiscoverAccounts} setLoading={this.setLoading}\n                  />,\n                  selectAddress: <SelectAddress\n                    parentCallback={this.handleSelectAddress}\n                    addresses={this.state.accountAddresses}\n                  />,\n                  specifyDetails: <SpecifyDetails\n                    parentCallback={this.handleSpecifyDetails}\n                    address={this.state.sendAddress}\n                  />,\n                  confirmTransaction: <ConfirmTransaction\n                    parentCallback={this.handleConfirmTransaction}\n                    transactionElements={this.state.transactionElements}\n                    transactionIO={this.state.transactionIO}\n                    sendAddress={this.state.sendAddress}\n                    loadingAlt={this.state.loadingAlt}\n                    setLoadingAlt={this.setLoadingAlt}\n                  />,\n                  complete: <Complete\n                    transactionResults={this.state.transactionResults}\n                  />\n                }[this.transactionSteps[this.state.currentStep]]\n              )\n            }\n\n          </section>\n        </article>\n\n        <footer className=\"app-footer\">\n          <small>&copy; {(new Date(Date.now())).getFullYear()} Tektite Software LLC.  This tool is Open Source and <a href=\"https://github.com/trezor/omni-trezor\" target=\"_blank\" rel=\"noopener noreferrer\">available on GitHub.</a></small>\n        </footer>\n      </main>\n    );\n  }\n\n  setLoading = (loadingStatus) => {\n    this.setState({loadingAlt: false});\n    this.setState({loading: loadingStatus});\n  }\n\n  // This is used by some components for specific functionality, whereas\n  // setLoading() has a global effect.\n  setLoadingAlt = (loadingStatus) => {\n    this.setState({loadingAlt: loadingStatus});\n  }\n\n  setStep = (step) => {\n    this.setState({currentStep: step});\n  }\n\n  handleDiscoverAccounts = async (accountResults) => {\n    console.log('Exported account details:\\n', accountResults);\n    if (accountResults.success === true) {\n      this.setLoading(true);\n      this.setState({accountInfo: accountResults.payload});\n      let transactions = accountResults.payload.utxo;\n      let eligibleTxs = transactions.filter(tx => parseInt(tx.amount) >= 8000);\n      let sortedTxs = eligibleTxs.sort(tx => parseInt(tx.amount));\n      let addressPaths = eligibleTxs.map(tx => tx.path).filter((v, i, a) => a.indexOf(v) === i);\n      let eligibleAddrs = addressPaths.map(a => {\n        let tx = sortedTxs.find(tx => tx.path === a);\n        return({\n          addressPath: a,\n          outTxHash: tx.txid,\n          outTxIndex: tx.vout,\n          outTxValue: parseInt(tx.amount)\n        });\n      });\n      let transactionApiResults = {};\n      for (const a of eligibleAddrs) {\n        let txResultRaw = await fetch(`https://blockstream.info/api/tx/${a.outTxHash}`);\n        let txResultJson = await txResultRaw.json();\n        transactionApiResults[a.outTxHash] = txResultJson;\n      }\n      eligibleAddrs = eligibleAddrs.map((a) => {\n        a.address = transactionApiResults[a.outTxHash].vout[a.outTxIndex].scriptpubkey_address;\n        return a;\n      });\n      console.log('Detected eligible addresses:\\n', eligibleAddrs);\n\n      let omniDetailsRaw = await fetch('https://api.omniwallet.org/v2/address/addr/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: eligibleAddrs.map(a => `addr=${a.address}`).join('&')\n      });\n      let omniDetails = await omniDetailsRaw.json();\n      console.log('Eligible address OMNI details:\\n', omniDetails);\n\n      let addressDetails = eligibleAddrs.map(a => {\n        a.omniDetails = omniDetails[a.address];\n        return a;\n      });\n      addressDetails = addressDetails.filter(a => a.omniDetails.balance.length > 1);\n      this.setState({accountAddresses: addressDetails});\n      console.log('Final parsed address details:\\n', addressDetails);\n\n      this.setStep(1);\n      this.setLoading(false);\n    } else {\n      this.setLoading(false);\n    }\n  }\n\n  handleSelectAddress = async (address) => {\n    this.setLoading(true);\n\n    this.setState({sendAddress: address});\n\n    this.setStep(2);\n    this.setLoading(false);\n  }\n\n  handleSpecifyDetails = async (data) => {\n    this.setLoading(true);\n\n    let formData = {\n      asset: this.state.sendAddress.omniDetails.balance[data.assetIndex],\n      amount: data.amount,\n      recipient: data.recipient,\n    }\n    console.log('Received the following transaction details from form:\\n', formData);\n\n    this.setState({\n      transactionElements: {\n        asset: formData.asset,\n        amount: formData.amount,\n        recipient: formData.recipient,\n      }\n    }, async () => {\n      let transactionIO = await this._generateTransaction();\n      this.setState({transactionIO: transactionIO});\n\n      this.setStep(3);\n      this.setLoading(false);\n    });\n  }\n\n  handleConfirmTransaction = async () => {\n    this.setLoadingAlt(true);\n\n    let transactionResults = await this._signSendTransaction();\n    this.setState({transactionResults: transactionResults}, () => {\n      console.log('Transaction results:\\n', transactionResults);\n      this.setLoadingAlt(false);\n\n      if (transactionResults.success === true) {\n        this.setStep(4);\n      } else {\n        alert(\"There was an issue completing the transaction.\\nSee the console for details.\");\n      }\n\n      this.setLoading(false);\n    });\n  }\n\n  _generateTransaction = async () => {\n    let omniPrefix = '6f6d6e69';\n    let omniVersion = '0000';\n    let omniAssetId = parseInt(this.state.transactionElements.asset.id).toString(16).padStart(12, 0);\n    let omniAmount = this.state.transactionElements.amount;\n    if (this.state.transactionElements.asset.divisible === true) {\n      omniAmount = (omniAmount * 100000000);\n    }\n    omniAmount = parseFloat(omniAmount).toString(16).padStart(16, 0);\n    let omniSegments = [\n      omniPrefix, // OMNI\n      omniVersion,     // Version\n      omniAssetId,\n      omniAmount\n    ]\n    let omniSimpleSendData = omniSegments.join('')\n\n    var calculatedFee;\n    var changeAmount;\n    // If you have 12600 satoshi or more in the output, you get change.\n    // The minimum change amount is 600 satoshi.\n    let gettingChange = (this.state.sendAddress.outTxValue >= 12600);\n    if (gettingChange) {\n      changeAmount = (this.state.sendAddress.outTxValue - 12000);\n      calculatedFee = 11400;\n    } else {\n      calculatedFee = (this.state.sendAddress.outTxValue - 600);\n    }\n\n    let inputs = [{\n      address_n: getHDPath(this.state.sendAddress.addressPath),\n      prev_index: this.state.sendAddress.outTxIndex,\n      prev_hash: this.state.sendAddress.outTxHash,\n      amount: this.state.sendAddress.outTxValue.toString(),\n      script_type: 'SPENDP2SHWITNESS'\n    }];\n\n    let outputs = [\n      {\n        op_return_data: omniSimpleSendData,\n        amount: '0',\n        script_type: 'PAYTOOPRETURN'\n      },\n      {\n        address: this.state.transactionElements.recipient,\n        amount: '600',\n        script_type: 'PAYTOADDRESS'\n      }\n    ];\n\n    if (gettingChange) {\n      outputs.push({\n        address_n: getHDPath(this.state.sendAddress.addressPath),\n        amount: changeAmount.toString(),\n        script_type: 'PAYTOP2SHWITNESS'\n      });\n\n      // inputs[0].script_type = 'SPENDP2SHWITNESS';\n      // inputs[0].amount = this.state.sendAddress.outTxValue.toString();\n    }\n\n    return({\n      inputs: inputs,\n      outputs: outputs,\n      opreturnData: omniSimpleSendData,\n      opreturnDataSegments: omniSegments,\n      estimatedFee: calculatedFee\n    });\n  }\n\n  _signSendTransaction = async() => {\n    let transactionResults = await TrezorConnect.signTransaction({\n      inputs: this.state.transactionIO.inputs,\n      outputs: this.state.transactionIO.outputs,\n      coin: 'btc',\n      push: true\n    });\n    return(transactionResults);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}